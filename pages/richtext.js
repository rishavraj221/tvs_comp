import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/dist/client/router";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import jwtDecode from "jwt-decode";
import CssBaseline from "@mui/material/CssBaseline";

import useWindowDimensions from "../hooks/useWindowDimensions";
import {
  htmlToPdf,
  saveToS3,
  getPdf,
  updatePdf,
  updateNEPdf,
} from "../api/prod";
import "react-quill/dist/quill.snow.css";
import styles from "../styles/Home.module.css";

const theme = createTheme({
  palette: {
    mode: "dark",
  },
});

const QuillNoSSRWrapper = dynamic(import("react-quill"), {
  ssr: false,
  loading: () => <p>Loading ...</p>,
});

const modules = {
  toolbar: [
    [{ header: "1" }, { header: "2" }, { font: [] }],
    [{ size: [] }],
    ["bold", "italic", "underline", "strike", "blockquote"],
    [
      { list: "ordered" },
      { list: "bullet" },
      { indent: "-1" },
      { indent: "+1" },
    ],
    ["link", "image", "video"],
    ["clean"],
  ],
  clipboard: {
    // toggle to add extra line breaks when pasting HTML:
    matchVisual: false,
  },
};
/*
 * Quill editor formats
 * See https://quilljs.com/docs/formats/
 */
const formats = [
  "header",
  "font",
  "size",
  "bold",
  "italic",
  "underline",
  "strike",
  "blockquote",
  "list",
  "bullet",
  "indent",
  "link",
  "image",
  "video",
];

export default function Home() {
  const router = useRouter();

  const query = router.query;
  const decodedToken = jwtDecode(
    localStorage.getItem("admin-token") || localStorage.getItem("emp-token")
  );

  const [rteContent, setRTEContent] = useState(null);
  const [fileName, setFilename] = useState(null);
  const [loading, setLoading] = useState(false);
  const [saveBtnDisable, setSaveBtnDisable] = useState(false);
  const [neloading, setNEloading] = useState(false);
  const [neBtnDisable, setNEBtnDisable] = useState(false);

  useEffect(() => {
    if (query && query["temp_name"]) setFilename(query["temp_name"]);
    if (query && query["temp_data"]) setRTEContent(query["temp_data"]);
  }, []);

  const htmlToPdfFunc = async (content) => {
    const res = await htmlToPdf(content);
    // console.log(res.body);
    // setPdfSrc(res.body);
  };

  const onSave = async (content) => {
    setLoading(true);

    const pdfID = query["pdfID"] || "";

    const res2 = await updatePdf(pdfID, decodedToken["id"], fileName, content);

    router.push({
      pathname: "/richtext",
      query: {
        pdfID: res2["body"]["pdfID"],
        temp_data: content,
        temp_name: fileName,
      },
    });

    setSaveBtnDisable(true);

    setLoading(false);
  };

  const onAskApproval = async (content) => {
    setNEloading(true);
    const pdfBuffer = await htmlToPdf(content);
    const arrayBuffer = JSON.parse(pdfBuffer["body"])["data"];

    const res = await saveToS3(fileName, arrayBuffer);

    const res2 = await updateNEPdf(
      res["body"]["key"],
      decodedToken["id"],
      fileName,
      JSON.stringify(res["body"]),
      "pending"
    );

    setNEBtnDisable(true);
    alert("Asked for approval!");

    setNEloading(false);
  };

  const getPdfFunc = async () => {
    const res = await getPdf("Personal Loan");

    console.log(res);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>TVS Project</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <div className={styles.logo}>
            <Image
              src="/tvs_logo.png" // Route of the image file
              height={80} // Desired size with correct aspect ratio
              width={200} // Desired size with correct aspect ratio
              alt="TVS Logo"
            />
          </div>

          <div className={styles.rteHead}>
            <div className={styles.rteHeadS}>
              <Image
                className="pointer"
                onClick={() => {
                  const token =
                    typeof localStorage !== "undefined" &&
                    (localStorage.getItem("admin-token") ||
                      localStorage.getItem("emp-token"));
                  const decodedToken = jwtDecode(token);
                  router.push(
                    decodedToken["role"] === "employee" ? "/employee" : "/admin"
                  );
                }}
                src="/icons/back.svg" // Route of the image file
                height={25} // Desired size with correct aspect ratio
                width={25} // Desired size with correct aspect ratio
                alt="Back"
              />
              <div className={styles.rteHeadSS}>
                <TextField
                  id="outlined-basic"
                  size="small"
                  value={fileName}
                  onChange={(e) => {
                    setFilename(e.target.value);
                    setNEBtnDisable(false);
                    setSaveBtnDisable(false);
                  }}
                  variant="outlined"
                />
              </div>
            </div>

            <div className={styles.rteHeadS}>
              <div className={styles.rteHeadSS}>
                {loading ? (
                  <div>Saving...</div>
                ) : (
                  <Button
                    variant="contained"
                    disabled={saveBtnDisable}
                    onClick={() => onSave(rteContent)}
                  >
                    Save
                  </Button>
                )}
              </div>
              <div className={styles.rteHeadSS}>
                {neloading ? (
                  <div>Asking...</div>
                ) : (
                  <Button
                    variant="contained"
                    disabled={neBtnDisable}
                    onClick={() => onAskApproval(rteContent)}
                  >
                    Ask for Approval
                  </Button>
                )}
              </div>
            </div>
          </div>

          <div className={styles.rteCont}>
            <QuillNoSSRWrapper
              modules={modules}
              formats={formats}
              value={rteContent}
              theme="snow"
              onChange={(content) => {
                setRTEContent(content);
                setNEBtnDisable(false);
                setSaveBtnDisable(false);
              }}
            />
          </div>
        </ThemeProvider>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
