import { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { useRouter } from "next/dist/client/router";
import TextField from "@mui/material/TextField";
import Image from "next/image";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import Button from "@mui/material/Button";
import jwtDecode from "jwt-decode";

import useWindowDimensions from "../hooks/useWindowDimensions";
import { getPdf, updateNEPdfApproval } from "../api/prod";
import styles from "../styles/Home.module.css";

const theme = createTheme({
  palette: {
    mode: "dark",
  },
});

const NEPDFs = () => {
  const { width, height } = useWindowDimensions();
  const router = useRouter();
  const query = router.query;

  const decodedToken = jwtDecode(
    localStorage.getItem("admin-token") || localStorage.getItem("emp-token")
  );

  const [arrayBuffer, setArrayBuffer] = useState(null);
  const [approving, setApproving] = useState(false);
  const [approveBtnDisable, setApprBtnDisable] = useState(false);
  const [rejecting, setRejecting] = useState(false);
  const [rejectBtnDisable, setRejectBtnDisable] = useState(false);

  const getPdfFunc = async (Key) => {
    const res = await getPdf(Key);

    setArrayBuffer(res["body"]["Body"]["data"]);
  };

  useEffect(() => {
    query && query["pdfID"] && getPdfFunc(query["pdfID"]);
  }, [query]);

  const pdfLink = (arrayBuffer) => {
    const blob = new Blob([new Uint8Array(arrayBuffer).buffer], {
      type: "application/pdf",
    });
    const link =
      typeof window !== "undefined" && window.URL.createObjectURL(blob);
    return link;
  };

  const onApprove = async (id) => {
    setApproving(true);

    const res2 = await updateNEPdfApproval(id, "approved");

    setApprBtnDisable(true);
    alert("Letter Approved!");
    router.push("/admin");

    setApproving(false);
  };

  const onReject = async (id) => {
    setRejecting(true);

    const res2 = await updateNEPdfApproval(id, "rejected");

    setRejectBtnDisable(true);
    alert("Letter Rejected!");
    router.push("/admin");

    setRejecting(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>TVS Project</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <div className={styles.logo}>
            <Image
              src="/tvs_logo.png" // Route of the image file
              height={80} // Desired size with correct aspect ratio
              width={200} // Desired size with correct aspect ratio
              alt="TVS Logo"
            />
          </div>

          <div className={styles.empInfo}>
            <div className={styles.empIcon}>R</div>
            <div className={styles.empDropdownContent}>
              <div
                className={styles.empDDList}
                onClick={() => {
                  localStorage.clear();
                  router.push("/");
                }}
              >
                Log Out
              </div>
            </div>
          </div>

          {arrayBuffer ? (
            <div style={{ width: "80%" }}>
              <div className={styles.rteHead} style={{ width: "100%" }}>
                <div className={styles.rteHeadS}>
                  <Image
                    className="pointer"
                    onClick={() => {
                      const token =
                        typeof localStorage !== "undefined" &&
                        (localStorage.getItem("admin-token") ||
                          localStorage.getItem("emp-token"));
                      const decodedToken = jwtDecode(token);
                      router.push(
                        decodedToken["role"] === "employee"
                          ? "/employee"
                          : "/admin"
                      );
                    }}
                    src="/icons/back.svg" // Route of the image file
                    height={25} // Desired size with correct aspect ratio
                    width={25} // Desired size with correct aspect ratio
                    alt="Back"
                  />
                </div>

                {query &&
                  query["approval"] === "pending" &&
                  decodedToken["role"] === "admin" && (
                    <div className={styles.rteHeadS}>
                      <div className={styles.rteHeadSS}>
                        {approving ? (
                          <div>Approving...</div>
                        ) : (
                          <Button
                            variant="contained"
                            disabled={approveBtnDisable}
                            onClick={() => onApprove(query["pdfID"])}
                          >
                            Approve
                          </Button>
                        )}
                      </div>
                      <div className={styles.rteHeadSS}>
                        {rejecting ? (
                          <div>Rejecting...</div>
                        ) : (
                          <Button
                            variant="contained"
                            disabled={rejectBtnDisable}
                            onClick={() => onReject(query["pdfID"])}
                          >
                            Reject
                          </Button>
                        )}
                      </div>
                    </div>
                  )}
              </div>
              <iframe src={pdfLink(arrayBuffer)} width="100%" height={800} />
            </div>
          ) : (
            <div>Loading...</div>
          )}
        </ThemeProvider>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
};

export default NEPDFs;
